generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// old Renamedclass
model uc_class {
  id            Int             @id
  uc_id         Int?
  weekday       Int?
  start_time    String          @db.VarChar(10)
  end_time      String          @db.VarChar(10)
  local         String?         @db.VarChar(100)
  type          Int?
  shift         Int?
  uc            uc?             @relation(fields: [uc_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student_class student_class[]
  fromSwitch    class_switch[] @relation("class_from_id")
  toSwitch      class_switch[] @relation("class_to_id")

  @@map("class")
}

model student {
  id                Int             @id
  number            String?         @unique @db.VarChar(20)
  firstname         String?         @db.VarChar(100)
  lastname          String?         @db.VarChar(100)
  email             String?         @db.VarChar(100)
  password          String?         @db.VarChar(100)
  is_admin          Boolean?

  student_class     student_class[]
//  fromRenamedSwitch trade[] @relation("from_student_id")
//  toRenamedSwitch   trade[] @relation("to_student_id")
  from_student_id trade[] @relation("from_student_id")
  to_student_id   trade[] @relation("to_student_id")

}

model student_class {
  id           Int           @id
  student_id   Int?
  class_id     Int?

  uc_class     uc_class? @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student      student?      @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// old Renamedswitch
model class_switch {
  id              Int          @id @default(autoincrement())
  class_from_id   Int
  class_to_id     Int
  trade_id        Int
  
  tradeId         trade    @relation("trade_id", fields: [trade_id], references: [id])
  classFrom       uc_class @relation("class_from_id", fields: [class_from_id], references: [id])
  classTo         uc_class @relation("class_to_id", fields: [class_to_id], references: [id])

  @@map("switch")
}

model trade{
  id                         Int           @id @default(autoincrement())
  from_student_id            Int
  to_student_id              Int?
  status                     Status?
  publish_time               DateTime
  close_time                 DateTime?

  trade_id                   class_switch[]  @relation("trade_id")
  from_student               student         @relation("from_student_id", fields: [from_student_id], references: [id])
  to_student                 student?        @relation("to_student_id", fields: [to_student_id], references: [id])

}

model uc {
  id           Int            @id
  name         String?        @db.VarChar(100)
  year         Int?
  semester     Int?
  uc_class uc_class[]
}

enum Status {
  REMOVED
  PENDING
  ACCEPTED
}
