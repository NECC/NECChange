generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// OLD: uc_class 
model lesson {
  id         Int     @id
  course_id  Int?
  weekday    Int?
  start_time String  @db.VarChar(10)
  end_time   String  @db.VarChar(10)
  local      String? @db.VarChar(100)
  type       Int?
  shift      Int?

  course         course?          @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student_lesson student_lesson[]
  fromSwitch     lesson_trade[]   @relation("lesson_from_id")
  toSwitch       lesson_trade[]   @relation("lesson_to_id")

  @@map("class")
}

//OLD: student_class
model student_lesson {
  id         Int  @id
  student_id Int?
  lesson_id  Int?

  lesson lesson? @relation(fields: [lesson_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User   User?   @relation(fields: [student_id], references: [uniqueId], onDelete: NoAction, onUpdate: NoAction)
}

// OLD: class_switch 
model lesson_trade {
  id             Int @id @default(autoincrement())
  lesson_from_id Int
  lesson_to_id   Int
  trade_id       Int

  tradeId    trade  @relation("trade_id", fields: [trade_id], references: [id])
  lessonFrom lesson @relation("lesson_from_id", fields: [lesson_from_id], references: [id])
  lessonTo   lesson @relation("lesson_to_id", fields: [lesson_to_id], references: [id])

  @@map("switch")
}

model trade {
  id              Int       @id @default(autoincrement())
  from_student_id Int
  to_student_id   Int?
  status          Status?
  publish_time    DateTime
  close_time      DateTime?

  trade_id     lesson_trade[] @relation("trade_id")
  from_student User           @relation("from_student_id", fields: [from_student_id], references: [uniqueId])
  to_student   User?          @relation("to_student_id", fields: [to_student_id], references: [uniqueId])
}

//Old name: uc
model course {
  id       Int      @id
  name     String?  @db.VarChar(100)
  year     Int?
  semester Int?
  lesson   lesson[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  uniqueId      Int       @unique @default(autoincrement())
  number        String?   @unique @db.VarChar(20)
  firstname     String?   @db.VarChar(100)
  lastname      String?   @db.VarChar(100)
  email         String?   @unique
  emailVerified DateTime?
  partner       Boolean?
  role          Role?

  accounts        Account[]
  sessions        Session[]
  student_lesson  student_lesson[]
  from_student_id trade[]          @relation("from_student_id")
  to_student_id   trade[]          @relation("to_student_id")
}

model TradePeriods {
  id        Int       @id @default(autoincrement())
  isOpen    Boolean   @default(false)
  openDate  DateTime?
  closeDate DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Trade Status
enum Status {
  REMOVED
  PENDING
  ACCEPTED
}

// User Role
enum Role {
  SUPER_USER
  PROFESSOR
  STUDENT
}
